#!/usr/bin/env node

let structural = require('../lib/libstructural');
let fs = require('fs');
let nopt = require('nopt');

/**
 * remove extension from a filename
 * @param {String} fn - the filename
 * @returns {String} the filename without extension
 */
function removeExtension(fn) {
  let i = fn.lastIndexOf('.');
  if(i<0) return fn;
  return fn.slice(0, i);
}

exports.parseCLI = function parseCLI(...argv) {
  let args = nopt({'out': String, 'language': String, 'parser':String}, {'o':'--out', 'l':'--language', 'p':'--parser'}, argv, 0);
  if(!args.filename) args.filename = args.argv.remain[0];
  res = exports.parse(args);

  if(res) {
    console.error(res);
    process.exit(-1);
  }
}

exports.parse = function parse(args) {
  try {
    if(args.language===undefined) args.language = 'js';
    if(args.out===undefined) args.out = removeExtension(args.filename)+'.'+args.language;

    let res = structural.parseFile(args.filename, args);
    fs.writeFileSync(args.out, res);

    console.log('output written to '+args.out);

    args.out = fs.realpathSync(args.out);

    if(args.language=='js') {
      let m = require(args.out);
      console.log('syntax test succeeded');
      let buf = Buffer.allocUnsafe(1000000);
      for(let key of Object.keys(m)) {
        if(key=='STRUCTURE') continue;
        if(!key.endsWith('_ADDRESS')) continue;
        key = key.slice(0, -8);
        try {
          let cls = m[key];
          if(!cls) continue;
          cls.size();
          let o = new cls(buf);
          o.size();
        } catch(e) {
          console.error('Exception testing', key, e);
          //console.error(e);
        }
        //if(!(cls.constructor!=Function)) continue;
        //console.log(cls.constructor.name, cls.__proto__.constructor.name);
      }
    }
  } catch (e) {
    return e;
  }
}

if(require.main===module) {
  if(process.argv.length<3) {
    let p = require('./../package.json');
    console.log('Structural version', p.version);
    console.log('usage: structural [--language|-l=js|py] definitions.h [--out|-o outfilename]');
    return;
  }

  exports.parseCLI(...process.argv.slice(2));
}