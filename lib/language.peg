grammar TEST2

content    <- decls
decls      <- (ws? namespacedecl / ws? constdecl / ws? typedefstructdecl / ws? structdecl / ws? typedefenumdecl / ws? enumdecl / ws? comment / ws? ifndef / ws? pragma / ws? include / ws? sysinclude)* %decls

comment    <- (comment1 / comment2)

comment1   <- "//" ([^\n^\r]*) ws? %comment1
comment2   <- "/*" (!"*/" .)* "*/" ws? %comment2

pragma     <- "#pragma" ws pragmas (space (string / ident / number))* [\n\r] %pragma
pragmas    <- ("littleendian" / "bigendian")

ifndef     <- "#ifndef" ([^\n]*) %null

filepath   <- [\w-./]*

includekw  <- "#include" %null

hidden     <- "hidden" %hidden

include    <- includekw ws dqt filepath dqt %include
sysinclude <- includekw ws lt filepath gt %sysinclude

constdecl  <- const decl eq ws? expression eol %constdecl

namespacedecl <- namespace ws ident ws? "{" decls? ws? "}" %namespacedecl

typedefstructdecl <- (hidden)? ws? typedefstruct (ws transform)? (ws ident)? (ws (extends))? ws? "{" ws? structfields ws? "}" ws? idents? ws? eol ws? %structdecl
structdecl        <- (hidden)? ws? struct (ws transform)? (ws ident)? (ws (extends))? ws? "{" ws? structfields ws? "}" ws? idents? ws? eol ws? %structdecl
extends           <- ":" ws? ident %extends
structfields      <- ws? (structfield / lambdafield / switch / comment)+ ws? %structfields
idents            <- ident ws? ("," ws? ident)* %idents

and               <- "&"
shiftl            <- "<<"
shiftr            <- ">>"
logicops          <- ("(" / ")" / "&" / "|" / "^" / "~" / "<<" / ">>" / "+" / "-" / "*" / "/")

lambdaexpr        <- (ws? op:(ident / number / logicops) ws?)+
lambdamath        <- get:lambdaexpr set:(ws? "," ws? ident ws? "=" ws? lambdaexpr)? ws?
lambdafield       <- ws? "lambda" ws ident ws? "=" ws? lambdamath ws? eol ws? %lambdafield

structfield       <- structfield_ skip %structfield
structfield_      <- transform? ws? type ws? ident length? ws? default:default? ws? eol ws? comment1? ws? %flatten

type              <- (string_type / other_type) ws? %type

other_type        <- modifier? modifier? modifier? ident %other_type
modifier          <- ("static" / "const" / "hidden" / "unsigned" / "reversed" / transform) ws %modifier
transform         <- "transform(" ws? ident args? ws? ")" %transform
args              <- "(" ws? (arg ws? ","? ws?)+ ws? ")"
arg               <- number / string

string_type       <- (encoding? "string" / encoding? "cstring" / encoding? "char") ws %string_type
encoding          <- ("utf8" / "ascii" / "utf16le" / "ucs2" / "base64" / "latin1" / "binary" / "hex" / value) ws %encoding

default           <- eq ws? (string / number / hex / ident) %default

typedefenumdecl <- typedefenum ws ident? ws? "{" ws? enumfields ws? "}" ws? ident ws? eol ws? %typedefenumdecl
enumdecl        <- enum ws ident? ws? "{" ws? enumfields ws? "}" ws? eol ws? %enumdecl
enumfields      <- ws? (enumfield)+ ws?
enumfield       <- ident enumvalue? ws? comma? ws? comment1? ws? %enumfield
enumvalue       <- (eq ws? (string / number / hex)) %enumvalue

switch          <- ws? "switch" ws? "(" ident ")" ws? "{" ws? case* ws? "}" eol ws? %switch
case            <- ws? "case" ws number ":" ws? (structfields / break)+ ws? %case

decl           <- maybearray+ ws? %decl
maybearray     <- ident length? ws? %maybearray
length         <- "[" ws? value? (ws? arithmetic ws? value)? ws? "]" %length

namespace      <- "namespace"
break          <- "break;" %null
struct         <- "struct" %typestr
typedefstruct  <- "typedef struct" %typestr
enum           <- "enum" %null
typedefenum    <- "typedef enum" %null
const          <- "const" ws %null
eq             <- ws? "=" %eq
eol            <- ws? ";" %eol
comma          <- ws? "," %comma
ws             <- [\n\r\t ]+ %null
space          <- [\t ]+ %null
qt             <- "'" %null
dqt            <- '"' %null
lt             <- '<' %null
gt             <- '>' %null
skip           <- ''

value          <- (string / ident / number)
arithmetic     <- ("+" / "-" / "*" / "/")
expression     <- value (ws? arithmetic ws? value)*

debug     <- "*"? !![A-Za-z_] [A-Za-z0-9_]* %debug
ident     <- "*"? !![A-Za-z_] [A-Za-z0-9_:]* %ident
string    <- "\"" [^"]* "\"" %string
number    <- (bin / hex / num)
num       <- [0-9]+ ("." [0-9]+)? %number
hex       <- "0x" [0-9a-fA-F]+ %number
bin       <- "0b" [01]+ %number