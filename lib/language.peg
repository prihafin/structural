grammar TEST2

content   <- decls
decls     <- (ws? constdecl / ws? typedefstructdecl / ws? structdecl / ws? typedefenumdecl / ws? enumdecl / ws? comment / ws? ifndef / ws? pragma / ws? include / ws? sysinclude)* %decls

comment   <- (comment1 / comment2)

comment1  <- "//" ([^\n]*) ws? %null
comment2  <- "/*" (!"*/" .)* "*/" ws? %null

pragma     <- "#pragma" ws ident (space (string / ident / number))* [\n\r] %pragma

ifndef     <- "#ifndef" ([^\n]*) %null

filepath   <- [\w-./]*

_include   <- "#include" %null

include    <- _include ws '"' filepath '"' %include
sysinclude <- _include ws lt filepath gt %sysinclude

constdecl  <- const decl eq (string / ident / number) eol %constdecl

typedefstructdecl <- typedefstruct ws ident? ws? "{" ws? structfields ws? "}" ws? idents? ws? eol ws? %typedefstructdecl
structdecl        <- struct ws ident? ws? "{" ws? structfields ws? "}" ws? idents? ws? eol ws? %structdecl
structfields      <- ws? (structfield / lambdafield / switch / comment)+ ws?
_structfield      <- decl ("[" (number / ident) "]" ws ident)? ws? default:default? ws? eol ws? comment1? ws? %structfield
__structfield     <- decl length? ws? ident? length? ws? default:default? ws? eol ws? comment1? ws? %structfield
idents            <- pident ws? ("," ws? pident)*

and               <- "&"
shiftl            <- "<<"
shiftr            <- ">>"
logicops          <- ("(" / ")" / "&" / "|" / "^" / "~" / "<<" / ">>" / "+" / "-" / "*" / "/")
lambdaexpr        <- (ws? op:(ident / number / logicops) ws?)+
lambdamath        <- get:lambdaexpr set:(ws? "," ws? ident ws? "=" ws? lambdaexpr)? ws?
lambdafield       <- ws? "lambda" ws ident ws? "=" ws? lambdamath ws? eol ws? %lambdafield
structfield       <- decl ws? default:default? ws? eol ws? comment1? ws? %structfield

default           <- "=" ws? (string / number / hex)

typedefenumdecl <- typedefenum ws ident? ws? "{" ws? enumfields ws? "}" ws? ident ws? eol ws? %typedefenumdecl
enumdecl        <- enum ws ident? ws? "{" ws? enumfields ws? "}" ws? eol ws? %enumdecl
enumfields      <- ws? (enumfield)+ ws?
enumfield       <- ident eq (string / number / hex) ws? comma? ws? comment1? ws? %enumfield

switch     <- ws? "switch" ws? "(" ident ")" ws? "{" ws? case* ws? "}" eol ws? %switch
case       <- ws? "case" ws number ":" ws? (structfields / break)+ ws? %case

decl           <- maybearray+ ws? %decl
maybearray     <- ident length? ws? %maybearray
length         <- "[" ws? (number / ident)? ws? "]" %length

break          <- "break;" %null
struct         <- "struct" %null
typedefstruct  <- "typedef struct" %null
enum           <- "enum" %null
typedefenum    <- "typedef enum" %null
const          <- "const" ws %null
eq             <- ws? "=" ws? %null
eol            <- ws? ";" %null
comma          <- ws? "," %null
ws             <- [\n\r\t ]+ %null
space          <- [\t ]+ %null
qt             <- "'" %null
dqt            <- '"' %null
lt             <- '<' %null
gt             <- '>' %null

pident    <- "*"? [A-Za-z_] [A-Za-z0-9_]* %pident
ident     <- [A-Za-z_] [A-Za-z0-9_]* %ident
string    <- "\"" [^"]* "\"" %string
number    <- (bin / hex / num)
num       <- [0-9]+ ("." [0-9]+)? %number
hex       <- "0x" [0-9a-fA-F]+ %number
bin       <- "0b" [01]+ %number
